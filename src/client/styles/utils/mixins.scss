@mixin removeDefaultButtonStyle {
  border: 0;
  background: none;
  padding: 0;
}

@mixin visuallyHidden {
  position: absolute;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

@mixin displayVisuallyHidden {
  position: relative;
  left: 0;
  height: auto;
  width: 100%;
}

/* CLEARFIX EXTEND MIXIN
 * ---------------------
 * Usage: @extend %clearfix;
 * Desc: Provides IE6 and up support
 * to clear floated elements.
*/
// %clearfix {
//   *zoom: 1;
//   &:before, &:after {
//     content: " ";
//     display: table;
//   }
//   &:after {
//     clear: both;
//   }
// }

/* --- Media Query Generator ---
 * Reusable mixin used to generate
 * variations of media query properties.
 */
@mixin generate-mq($args...) {
  $media-type: 'only screen';
  $media-type-key: 'media-type';
  $args: keywords($args);
  $expr: '';

  @if map-has-key($args, $media-type-key) {
    $media-type: map-get($args, $media-type-key);
    $args: map-remove($args, $media-type-key);
  }

  @each $key, $value in $args {
    @if $value {
      $expr: "#{$expr} and (#{$key}: #{$value})";
    }
  }

  @media #{$media-type} #{$expr} {
    @content;
  }
}

/* min-and-max-screen($min, $max, $orientation)
 * $min - required
 * $max - required
 * $orientation - optional
 * Ex: @include min-and-max-screen(768px, 1024px, landscape) { ... }
 */
@mixin min-and-max-screen($min, $max, $orientation: false) {
  @include generate-mq($min-width: $min, $max-width: $max, $orientation: $orientation) {
    @content;
  }
}

/* max-screen($max, $orientation)
 * $max - required
 * $orientation - optional
 * Ex #1: @include max-screen(768px, landscape) { ... }
 * Ex #2: @include max-screen(768px) { ... }
 */
@mixin max-screen($max, $orientation: false) {
  @include generate-mq($max-width: $max, $orientation: $orientation) {
    @content;
  }
}

/* min-screen($min, $orientation)
 * $min - required
 * $orientation - optional
 * Ex #1: @include min-screen(768px, landscape) { ... }
 * Ex #2: @include min-screen(768px) { ... }
 */
@mixin min-screen($min, $orientation: false) {
  @include generate-mq($min-width: $min, $orientation: $orientation) {
    @content;
  }
}

/* FONT FACE MIXIN
 * ---------------
 * Usage: @include font-face('Kievit-Regular', 'http://...');
 * Desc: Do not include the font file extension, this mixin
 * will generate the proper extensions.
*/
@mixin font-face($font-family, $file-path) {
  @font-face {
    font-family: $font-family;
    src: url('#{$file-path}.eot');
    src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
         url('#{$file-path}.woff') format('woff'),
         url('#{$file-path}.ttf') format('truetype');
  }
}

/* BORDER RADIUS MIXIN
 * -------------------
 * Usage: @include border-radius(5px);
 * Desc: Creates a border radius
*/
// @mixin border-radius($radius) {
//   -webkit-border-radius: $radius;
//   border-radius: $radius;
// }

/* OPACITY MIXIN
 * ---------------
 * Usage: @include opacity(0.8);
 * Desc: Supports cross-browser Opacity rules
*/
// @mixin opacity($opacity) {
//   opacity: $opacity;
//   $opacity-ie: $opacity * 100;
//   filter: alpha(opacity=$opacity-ie); //IE8
// }

// @mixin box-shadow($params) {
//   -webkit-box-shadow: $params;
//   -moz-box-shadow:    $params;
//   box-shadow:         $params;
// }

// @mixin box-sizing($type: border-box) {
//   -webkit-box-sizing:   $type;
//   -moz-box-sizing:      $type;
//   box-sizing:           $type;
// }

// @mixin clearfix {
//   &:before,
//   &:after {
//     content: " ";
//     display: block;
//   }
//   &:after {
//     clear: both;
//     visibility: hidden;
//     line-height: 0;
//     height: 0;
//     font-size: 0;
//   }
// }

@mixin transform($params) {
  -webkit-transform: $params;
  -moz-transform:    $params;
  transform:         $params;
}
@mixin transform-origin($params) {
  -webkit-transform-origin: $params;
  -moz-transform-origin:    $params;
  transform-origin:         $params;
}

// @mixin transition($params) {
//   -moz-transition:    $params;
//   -o-transition:      $params;
//   -webkit-transition: $params;
//   -ms-transition:     $params;
//   transition:         $params;
// }
@mixin transition-list($values...){
  -moz-transition:    $values;
  -o-transition:      $values;
  -webkit-transition: $values;
  -ms-transition:     $values;
  transition:         $values;
}
@mixin transition-transform($values...) {
  -webkit-transition: -webkit-transform $values;
     -moz-transition: -moz-transform $values;
       -o-transition: -o-transform $values;
          transition: transform $values;
}

@mixin clear-filters-button {
  border: 1px solid #d0343a;
  color: #d0343a;
  background: #fff;

  svg {
    fill: #d0343a;
  }

  &:hover {
    border: 1px solid #fff;
    color: #fff;
    background: #d0343a;

    svg {
      fill: #fff;
    }
  }
}
